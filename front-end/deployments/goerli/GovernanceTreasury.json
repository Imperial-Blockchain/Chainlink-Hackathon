{
  "address": "0xA1cd82197a0a64cbCa6402117C4AF973e9e67632",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registry_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "voteTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "SentFunds",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "sendFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feed",
          "type": "address"
        }
      ],
      "name": "setPriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb63def6f011b8f7aae5a521b7ecde8a3563e53cf421c5f5c4a429532c9eda2c3",
  "receipt": {
    "to": null,
    "from": "0x2d949C8bC0d866783C0a8629208cb9dd2a5d2302",
    "contractAddress": "0xA1cd82197a0a64cbCa6402117C4AF973e9e67632",
    "transactionIndex": 68,
    "gasUsed": "1959899",
    "logsBloom": "0x
    "blockHash": "0x024153578c70ec85f01ca25d402ba452812c975f049f41be26f551629048dbe9",
    "transactionHash": "0xb63def6f011b8f7aae5a521b7ecde8a3563e53cf421c5f5c4a429532c9eda2c3",
    "logs": [
      {
        "transactionIndex": 68,
        "blockNumber": 7959043,
        "transactionHash": "0xb63def6f011b8f7aae5a521b7ecde8a3563e53cf421c5f5c4a429532c9eda2c3",
        "address": "0xA1cd82197a0a64cbCa6402117C4AF973e9e67632",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002d949c8bc0d866783c0a8629208cb9dd2a5d2302"
        ],
        "data": "0x",
        "logIndex": 148,
        "blockHash": "0x024153578c70ec85f01ca25d402ba452812c975f049f41be26f551629048dbe9"
      }
    ],
    "blockNumber": 7959043,
    "cumulativeGasUsed": "28096221",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa24f5713e4af49cf9476fa23b7815820b76878ed"
  ],
  "numDeployments": 2,
  "solcInputHash": "dccfbe3792c7bc45204dc1914c8cd437",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"voteTokenAmount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"SentFunds\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"sendFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"}],\"name\":\"setPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit(address,uint256)\":{\"details\":\"If ETH is sent, the function arguments are ignored.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GovernanceTreasury.sol\":\"GovernanceTreasury\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/GovernanceTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IGovernanceTreasury.sol\\\";\\nimport \\\"./interfaces/IGovernanceRegistry.sol\\\";\\nimport \\\"./interfaces/ITokenRegistry.sol\\\";\\nimport \\\"./interfaces/IGovernanceToken.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ninterface IERC20Decimals {\\n    function decimals() external view returns (uint8);\\n}\\n\\n\\ncontract GovernanceTreasury is IGovernanceTreasury, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    uint internal constant ETH_DECIMALS = 18;\\n    IGovernanceRegistry private immutable _registry;\\n    mapping(address => address) private _priceFeeds;\\n\\n    constructor(address registry_) {\\n        _registry = IGovernanceRegistry(registry_);\\n    }\\n\\n    /// @dev If ETH is sent, the function arguments are ignored.\\n    function deposit(address tokenAddr, uint256 amount) external payable override {\\n        require(ITokenRegistry(_registry.tokenRegistry()).authorized(tokenAddr), \\\"Invalid token address\\\");\\n\\n        IGovernanceToken govToken = IGovernanceToken(_registry.governanceToken());\\n        if (tokenAddr == address(0)) {\\n            // if ETH\\n            govToken.mint(msg.sender, msg.value);\\n            emit Deposited(address(0), msg.value, msg.value);\\n        } else {\\n            require(msg.value == 0, \\\"Invalid msg amount\\\");\\n            // if not ETH\\n            // price feed exists, i.e. token is authorized\\n            // this contract approved to transferFrom amount\\n            IERC20(tokenAddr).transferFrom(msg.sender, address(this), amount);\\n            uint voteAmount = _getAmountVoteToken(tokenAddr, amount);\\n            govToken.mint(msg.sender, voteAmount);\\n            emit Deposited(tokenAddr, amount, voteAmount);\\n        }\\n    }\\n\\n    function sendFunds(address tokenAddr, address to, uint amount, uint256 epoch) external {\\n        // only governance voting\\n        require(msg.sender == _registry.governanceVoter(), \\\"Unauthorised caller\\\");\\n\\n        // burn the governance tokens\\n        IGovernanceToken govToken = IGovernanceToken(_registry.governanceToken());\\n        govToken.burn(msg.sender, amount);\\n\\n        if (tokenAddr == address(0)) {\\n            if(address(this).balance < amount) {\\n                amount = address(this).balance;\\n            }\\n\\n            (bool success, ) = to.call{ value: amount, gas: 2300 }(\\\"\\\");\\n            require(success, \\\"Transfer failed\\\");\\n        } else {\\n            if (IERC20(tokenAddr).balanceOf(address(this)) < amount) {\\n                amount = IERC20(tokenAddr).balanceOf(address(this));\\n            }\\n\\n             IERC20(tokenAddr).safeTransfer(to, amount);\\n        }\\n        \\n        emit SentFunds(tokenAddr, to, amount, epoch);\\n    }\\n\\n    function registry() external view override returns (address) {\\n        return address(_registry);\\n    }\\n    \\n    function setPriceFeed(address token, address feed) external override onlyOwner {\\n        _priceFeeds[token] = feed;\\n    }\\n\\n    function getPriceFeed(address token) external view returns (address) {\\n        return _priceFeeds[token];\\n    }\\n\\n    /// @dev Logic to get the amount of token votes to transfer: $$p_f \\\\frac{p_t d_t}{p_{ETH} d_{ETH}} \\\\frac{d_{ETH}}{d_t} = p_f d_f\\n    function _getAmountVoteToken(address tokenAddr, uint amount) internal view returns (uint256) {\\n        // check token authorized\\n        address feedAddr = _priceFeeds[tokenAddr];\\n        require(feedAddr != address(0), \\\"Invalid Token\\\");\\n        AggregatorV3Interface feed = AggregatorV3Interface(feedAddr);\\n\\n        // get decimals\\n        uint8 tokenDecimals = IERC20Decimals(tokenAddr).decimals(); // the decimals function is not mandatory according to EIP20\\n        uint8 feedDecimals = feed.decimals();\\n        uint decimals = _getDecimals(tokenDecimals, feedDecimals);\\n\\n        // get price\\n        (, int256 price, , , ) = feed.latestRoundData();\\n        require(price > 0, \\\"Invalid Price\\\");\\n\\n        return ((10 ** decimals) * amount) / uint(price);\\n    }\\n\\n    function _getDecimals(uint8 decimalsToken, uint8 decimalsFeed) internal pure returns (uint) {\\n        if (decimalsToken < decimalsFeed) return uint(ETH_DECIMALS + (decimalsFeed - decimalsToken));\\n        else if (decimalsFeed < decimalsToken) return uint(ETH_DECIMALS - (decimalsToken - decimalsFeed));\\n        return ETH_DECIMALS;\\n    }\\n}\\n\",\"keccak256\":\"0x809e9e368c34ae3cce4c13ccafecee8bc27db5b68cc83b998608a34eb805934e\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernanceRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IGovernanceRegistry {\\n    function governanceToken() external view returns (address token);\\n\\n    function setGovernanceToken(address token) external;\\n\\n    function governanceCharity() external view returns (address charity);\\n\\n    function setGovernanceCharity(address charity) external;\\n\\n    function governanceVoter() external view returns (address voting);\\n\\n    function setGovernanceVoter(address voting) external;\\n\\n    function governanceTreasury() external view returns (address treasury);\\n\\n    function setGovernanceTreasury(address treasury) external;\\n\\n    function tokenRegistry() external view returns (address);\\n\\n    function setTokenRegistry(address registry) external;\\n}\\n\",\"keccak256\":\"0xc7fed182de2ec9e722ca0fb051e5b83d967eaa32f6fdfd5d58fd17e18fd7e275\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IGovernanceToken is IERC20{\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address account, uint256 amount) external;\\n\\n    //----------------------------------------------------- accessor functions\\n\\n    function registry() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd507274514e5273d19c8c662ba71084190bbdbb9c8257266ad0c35ec236fcbc0\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernanceTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IGovernanceTreasury {\\n    event Deposited(\\n        address indexed token,\\n        uint256 indexed tokenAmount,\\n        uint256 indexed voteTokenAmount\\n    );\\n\\n    event SentFunds(address tokenAddr, address to, uint256 amount, uint256 epoch);\\n\\n    function deposit(address token, uint256 amount) external payable;\\n\\n    function sendFunds(address token, address to, uint256 amount, uint256 epoch) external;\\n\\n    function registry() external view returns (address);\\n\\n    function setPriceFeed(address token, address feed) external;\\n\\n    function getPriceFeed(address token) external view returns (address);\\n}\\n\",\"keccak256\":\"0x15018ffddd2eb1f282039c6cd8f14b6eb3cde3b758fbdde2d08f458b9843f9fd\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITokenRegistry {\\n    function add(address token) external;\\n\\n    function remove(address token) external;\\n\\n    function authorized(address token) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa7e484a7aa7385eefdbea716be7c4a459ebc522b55c3464998b48860d013bb2d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162002442380380620024428339818101604052810190620000379190620001c8565b620000576200004b6200009260201b60201c565b6200009a60201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050620001fa565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001908262000163565b9050919050565b620001a28162000183565b8114620001ae57600080fd5b50565b600081519050620001c28162000197565b92915050565b600060208284031215620001e157620001e06200015e565b5b6000620001f184828501620001b1565b91505092915050565b60805161221062000232600039600081816101c30152818161030c0152818161071d0152818161076c015261086a01526122106000f3fe60806040526004361061007b5760003560e01c80637b1039991161004e5780637b103999146101195780638da5cb5b146101445780639f8de4de1461016f578063f2fde38b146101985761007b565b806347e7ef24146100805780635b6cca801461009c578063715018a6146100d957806376e11286146100f0575b600080fd5b61009a60048036038101906100959190611459565b6101c1565b005b3480156100a857600080fd5b506100c360048036038101906100be9190611499565b610612565b6040516100d091906114d5565b60405180910390f35b3480156100e557600080fd5b506100ee61067b565b005b3480156100fc57600080fd5b50610117600480360381019061011291906114f0565b61068f565b005b34801561012557600080fd5b5061012e610719565b60405161013b91906114d5565b60405180910390f35b34801561015057600080fd5b50610159610741565b60405161016691906114d5565b60405180910390f35b34801561017b57600080fd5b5061019660048036038101906101919190611530565b61076a565b005b3480156101a457600080fd5b506101bf60048036038101906101ba9190611499565b610bcb565b005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639d23c4c76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561022c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025091906115ac565b73ffffffffffffffffffffffffffffffffffffffff1663b9181611836040518263ffffffff1660e01b815260040161028891906114d5565b602060405180830381865afa1580156102a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c99190611611565b610308576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ff9061169b565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f96dae0a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610375573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039991906115ac565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610487578073ffffffffffffffffffffffffffffffffffffffff166340c10f1933346040518363ffffffff1660e01b815260040161040a9291906116ca565b600060405180830381600087803b15801561042457600080fd5b505af1158015610438573d6000803e3d6000fd5b505050503434600073ffffffffffffffffffffffffffffffffffffffff167f73a19dd210f1a7f902193214c0ee91dd35ee5b4d920cba8d519eca65a7b488ca60405160405180910390a461060d565b600034146104ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c19061173f565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016105079392919061175f565b6020604051808303816000875af1158015610526573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054a9190611611565b5060006105578484610c4e565b90508173ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b81526004016105949291906116ca565b600060405180830381600087803b1580156105ae57600080fd5b505af11580156105c2573d6000803e3d6000fd5b5050505080838573ffffffffffffffffffffffffffffffffffffffff167f73a19dd210f1a7f902193214c0ee91dd35ee5b4d920cba8d519eca65a7b488ca60405160405180910390a4505b505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b610683610f06565b61068d6000610f84565b565b610697610f06565b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16637bb78e586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f991906115ac565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610866576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085d906117e2565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f96dae0a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f791906115ac565b90508073ffffffffffffffffffffffffffffffffffffffff16639dc29fac33856040518363ffffffff1660e01b81526004016109349291906116ca565b600060405180830381600087803b15801561094e57600080fd5b505af1158015610962573d6000803e3d6000fd5b50505050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603610a5d57824710156109a6574792505b60008473ffffffffffffffffffffffffffffffffffffffff16846108fc906040516109d090611833565b600060405180830381858888f193505050503d8060008114610a0e576040519150601f19603f3d011682016040523d82523d6000602084013e610a13565b606091505b5050905080610a57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4e90611894565b60405180910390fd5b50610b87565b828573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a9791906114d5565b602060405180830381865afa158015610ab4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad891906118c9565b1015610b5b578473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610b1791906114d5565b602060405180830381865afa158015610b34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5891906118c9565b92505b610b8684848773ffffffffffffffffffffffffffffffffffffffff166110489092919063ffffffff16565b5b7f9479fac13f22f51e577a7b5dabe94eff5edf7d760eba6270767c58035b996fc785858585604051610bbc94939291906118f6565b60405180910390a15050505050565b610bd3610f06565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610c42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c39906119ad565b60405180910390fd5b610c4b81610f84565b50565b600080600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610d22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1990611a19565b60405180910390fd5b600081905060008573ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d989190611a72565b905060008273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610de7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0b9190611a72565b90506000610e1983836110ce565b905060008473ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610e68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8c9190611b17565b50505091505060008113610ed5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ecc90611bde565b60405180910390fd5b808883600a610ee49190611d60565b610eee9190611dab565b610ef89190611e1c565b965050505050505092915050565b610f0e61113b565b73ffffffffffffffffffffffffffffffffffffffff16610f2c610741565b73ffffffffffffffffffffffffffffffffffffffff1614610f82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7990611e99565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6110c98363a9059cbb60e01b84846040516024016110679291906116ca565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611143565b505050565b60008160ff168360ff1610156111005782826110ea9190611eb9565b60ff1660126110f99190611eee565b9050611135565b8260ff168260ff16101561113057818361111a9190611eb9565b60ff1660126111299190611f22565b9050611135565b601290505b92915050565b600033905090565b60006111a5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661120a9092919063ffffffff16565b905060008151111561120557808060200190518101906111c59190611611565b611204576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111fb90611fc8565b60405180910390fd5b5b505050565b60606112198484600085611222565b90509392505050565b606082471015611267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125e9061205a565b60405180910390fd5b61127085611336565b6112af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a6906120c6565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516112d8919061214c565b60006040518083038185875af1925050503d8060008114611315576040519150601f19603f3d011682016040523d82523d6000602084013e61131a565b606091505b509150915061132a828286611359565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315611369578290506113b9565b60008351111561137c5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b091906121b8565b60405180910390fd5b9392505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006113f0826113c5565b9050919050565b611400816113e5565b811461140b57600080fd5b50565b60008135905061141d816113f7565b92915050565b6000819050919050565b61143681611423565b811461144157600080fd5b50565b6000813590506114538161142d565b92915050565b600080604083850312156114705761146f6113c0565b5b600061147e8582860161140e565b925050602061148f85828601611444565b9150509250929050565b6000602082840312156114af576114ae6113c0565b5b60006114bd8482850161140e565b91505092915050565b6114cf816113e5565b82525050565b60006020820190506114ea60008301846114c6565b92915050565b60008060408385031215611507576115066113c0565b5b60006115158582860161140e565b92505060206115268582860161140e565b9150509250929050565b6000806000806080858703121561154a576115496113c0565b5b60006115588782880161140e565b94505060206115698782880161140e565b935050604061157a87828801611444565b925050606061158b87828801611444565b91505092959194509250565b6000815190506115a6816113f7565b92915050565b6000602082840312156115c2576115c16113c0565b5b60006115d084828501611597565b91505092915050565b60008115159050919050565b6115ee816115d9565b81146115f957600080fd5b50565b60008151905061160b816115e5565b92915050565b600060208284031215611627576116266113c0565b5b6000611635848285016115fc565b91505092915050565b600082825260208201905092915050565b7f496e76616c696420746f6b656e20616464726573730000000000000000000000600082015250565b600061168560158361163e565b91506116908261164f565b602082019050919050565b600060208201905081810360008301526116b481611678565b9050919050565b6116c481611423565b82525050565b60006040820190506116df60008301856114c6565b6116ec60208301846116bb565b9392505050565b7f496e76616c6964206d736720616d6f756e740000000000000000000000000000600082015250565b600061172960128361163e565b9150611734826116f3565b602082019050919050565b600060208201905081810360008301526117588161171c565b9050919050565b600060608201905061177460008301866114c6565b61178160208301856114c6565b61178e60408301846116bb565b949350505050565b7f556e617574686f72697365642063616c6c657200000000000000000000000000600082015250565b60006117cc60138361163e565b91506117d782611796565b602082019050919050565b600060208201905081810360008301526117fb816117bf565b9050919050565b600081905092915050565b50565b600061181d600083611802565b91506118288261180d565b600082019050919050565b600061183e82611810565b9150819050919050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b600061187e600f8361163e565b915061188982611848565b602082019050919050565b600060208201905081810360008301526118ad81611871565b9050919050565b6000815190506118c38161142d565b92915050565b6000602082840312156118df576118de6113c0565b5b60006118ed848285016118b4565b91505092915050565b600060808201905061190b60008301876114c6565b61191860208301866114c6565b61192560408301856116bb565b61193260608301846116bb565b95945050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061199760268361163e565b91506119a28261193b565b604082019050919050565b600060208201905081810360008301526119c68161198a565b9050919050565b7f496e76616c696420546f6b656e00000000000000000000000000000000000000600082015250565b6000611a03600d8361163e565b9150611a0e826119cd565b602082019050919050565b60006020820190508181036000830152611a32816119f6565b9050919050565b600060ff82169050919050565b611a4f81611a39565b8114611a5a57600080fd5b50565b600081519050611a6c81611a46565b92915050565b600060208284031215611a8857611a876113c0565b5b6000611a9684828501611a5d565b91505092915050565b600069ffffffffffffffffffff82169050919050565b611abe81611a9f565b8114611ac957600080fd5b50565b600081519050611adb81611ab5565b92915050565b6000819050919050565b611af481611ae1565b8114611aff57600080fd5b50565b600081519050611b1181611aeb565b92915050565b600080600080600060a08688031215611b3357611b326113c0565b5b6000611b4188828901611acc565b9550506020611b5288828901611b02565b9450506040611b63888289016118b4565b9350506060611b74888289016118b4565b9250506080611b8588828901611acc565b9150509295509295909350565b7f496e76616c696420507269636500000000000000000000000000000000000000600082015250565b6000611bc8600d8361163e565b9150611bd382611b92565b602082019050919050565b60006020820190508181036000830152611bf781611bbb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115611c8457808604811115611c6057611c5f611bfe565b5b6001851615611c6f5780820291505b8081029050611c7d85611c2d565b9450611c44565b94509492505050565b600082611c9d5760019050611d59565b81611cab5760009050611d59565b8160018114611cc15760028114611ccb57611cfa565b6001915050611d59565b60ff841115611cdd57611cdc611bfe565b5b8360020a915084821115611cf457611cf3611bfe565b5b50611d59565b5060208310610133831016604e8410600b8410161715611d2f5782820a905083811115611d2a57611d29611bfe565b5b611d59565b611d3c8484846001611c3a565b92509050818404811115611d5357611d52611bfe565b5b81810290505b9392505050565b6000611d6b82611423565b9150611d7683611423565b9250611da37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484611c8d565b905092915050565b6000611db682611423565b9150611dc183611423565b9250828202611dcf81611423565b91508282048414831517611de657611de5611bfe565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611e2782611423565b9150611e3283611423565b925082611e4257611e41611ded565b5b828204905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611e8360208361163e565b9150611e8e82611e4d565b602082019050919050565b60006020820190508181036000830152611eb281611e76565b9050919050565b6000611ec482611a39565b9150611ecf83611a39565b9250828203905060ff811115611ee857611ee7611bfe565b5b92915050565b6000611ef982611423565b9150611f0483611423565b9250828201905080821115611f1c57611f1b611bfe565b5b92915050565b6000611f2d82611423565b9150611f3883611423565b9250828203905081811115611f5057611f4f611bfe565b5b92915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611fb2602a8361163e565b9150611fbd82611f56565b604082019050919050565b60006020820190508181036000830152611fe181611fa5565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061204460268361163e565b915061204f82611fe8565b604082019050919050565b6000602082019050818103600083015261207381612037565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006120b0601d8361163e565b91506120bb8261207a565b602082019050919050565b600060208201905081810360008301526120df816120a3565b9050919050565b600081519050919050565b60005b8381101561210f5780820151818401526020810190506120f4565b60008484015250505050565b6000612126826120e6565b6121308185611802565b93506121408185602086016120f1565b80840191505092915050565b6000612158828461211b565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b600061218a82612163565b612194818561163e565b93506121a48185602086016120f1565b6121ad8161216e565b840191505092915050565b600060208201905081810360008301526121d2818461217f565b90509291505056fea2646970667358221220dcad531871cc119328a2fdaff889c63f2a4737d1f7206a31cea77094fd27dff464736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c80637b1039991161004e5780637b103999146101195780638da5cb5b146101445780639f8de4de1461016f578063f2fde38b146101985761007b565b806347e7ef24146100805780635b6cca801461009c578063715018a6146100d957806376e11286146100f0575b600080fd5b61009a60048036038101906100959190611459565b6101c1565b005b3480156100a857600080fd5b506100c360048036038101906100be9190611499565b610612565b6040516100d091906114d5565b60405180910390f35b3480156100e557600080fd5b506100ee61067b565b005b3480156100fc57600080fd5b50610117600480360381019061011291906114f0565b61068f565b005b34801561012557600080fd5b5061012e610719565b60405161013b91906114d5565b60405180910390f35b34801561015057600080fd5b50610159610741565b60405161016691906114d5565b60405180910390f35b34801561017b57600080fd5b5061019660048036038101906101919190611530565b61076a565b005b3480156101a457600080fd5b506101bf60048036038101906101ba9190611499565b610bcb565b005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639d23c4c76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561022c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025091906115ac565b73ffffffffffffffffffffffffffffffffffffffff1663b9181611836040518263ffffffff1660e01b815260040161028891906114d5565b602060405180830381865afa1580156102a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c99190611611565b610308576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ff9061169b565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f96dae0a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610375573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039991906115ac565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610487578073ffffffffffffffffffffffffffffffffffffffff166340c10f1933346040518363ffffffff1660e01b815260040161040a9291906116ca565b600060405180830381600087803b15801561042457600080fd5b505af1158015610438573d6000803e3d6000fd5b505050503434600073ffffffffffffffffffffffffffffffffffffffff167f73a19dd210f1a7f902193214c0ee91dd35ee5b4d920cba8d519eca65a7b488ca60405160405180910390a461060d565b600034146104ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c19061173f565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016105079392919061175f565b6020604051808303816000875af1158015610526573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054a9190611611565b5060006105578484610c4e565b90508173ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b81526004016105949291906116ca565b600060405180830381600087803b1580156105ae57600080fd5b505af11580156105c2573d6000803e3d6000fd5b5050505080838573ffffffffffffffffffffffffffffffffffffffff167f73a19dd210f1a7f902193214c0ee91dd35ee5b4d920cba8d519eca65a7b488ca60405160405180910390a4505b505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b610683610f06565b61068d6000610f84565b565b610697610f06565b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16637bb78e586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f991906115ac565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610866576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085d906117e2565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f96dae0a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f791906115ac565b90508073ffffffffffffffffffffffffffffffffffffffff16639dc29fac33856040518363ffffffff1660e01b81526004016109349291906116ca565b600060405180830381600087803b15801561094e57600080fd5b505af1158015610962573d6000803e3d6000fd5b50505050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603610a5d57824710156109a6574792505b60008473ffffffffffffffffffffffffffffffffffffffff16846108fc906040516109d090611833565b600060405180830381858888f193505050503d8060008114610a0e576040519150601f19603f3d011682016040523d82523d6000602084013e610a13565b606091505b5050905080610a57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4e90611894565b60405180910390fd5b50610b87565b828573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a9791906114d5565b602060405180830381865afa158015610ab4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad891906118c9565b1015610b5b578473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610b1791906114d5565b602060405180830381865afa158015610b34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5891906118c9565b92505b610b8684848773ffffffffffffffffffffffffffffffffffffffff166110489092919063ffffffff16565b5b7f9479fac13f22f51e577a7b5dabe94eff5edf7d760eba6270767c58035b996fc785858585604051610bbc94939291906118f6565b60405180910390a15050505050565b610bd3610f06565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610c42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c39906119ad565b60405180910390fd5b610c4b81610f84565b50565b600080600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610d22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1990611a19565b60405180910390fd5b600081905060008573ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d989190611a72565b905060008273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610de7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0b9190611a72565b90506000610e1983836110ce565b905060008473ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610e68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8c9190611b17565b50505091505060008113610ed5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ecc90611bde565b60405180910390fd5b808883600a610ee49190611d60565b610eee9190611dab565b610ef89190611e1c565b965050505050505092915050565b610f0e61113b565b73ffffffffffffffffffffffffffffffffffffffff16610f2c610741565b73ffffffffffffffffffffffffffffffffffffffff1614610f82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7990611e99565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6110c98363a9059cbb60e01b84846040516024016110679291906116ca565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611143565b505050565b60008160ff168360ff1610156111005782826110ea9190611eb9565b60ff1660126110f99190611eee565b9050611135565b8260ff168260ff16101561113057818361111a9190611eb9565b60ff1660126111299190611f22565b9050611135565b601290505b92915050565b600033905090565b60006111a5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661120a9092919063ffffffff16565b905060008151111561120557808060200190518101906111c59190611611565b611204576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111fb90611fc8565b60405180910390fd5b5b505050565b60606112198484600085611222565b90509392505050565b606082471015611267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125e9061205a565b60405180910390fd5b61127085611336565b6112af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a6906120c6565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516112d8919061214c565b60006040518083038185875af1925050503d8060008114611315576040519150601f19603f3d011682016040523d82523d6000602084013e61131a565b606091505b509150915061132a828286611359565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315611369578290506113b9565b60008351111561137c5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b091906121b8565b60405180910390fd5b9392505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006113f0826113c5565b9050919050565b611400816113e5565b811461140b57600080fd5b50565b60008135905061141d816113f7565b92915050565b6000819050919050565b61143681611423565b811461144157600080fd5b50565b6000813590506114538161142d565b92915050565b600080604083850312156114705761146f6113c0565b5b600061147e8582860161140e565b925050602061148f85828601611444565b9150509250929050565b6000602082840312156114af576114ae6113c0565b5b60006114bd8482850161140e565b91505092915050565b6114cf816113e5565b82525050565b60006020820190506114ea60008301846114c6565b92915050565b60008060408385031215611507576115066113c0565b5b60006115158582860161140e565b92505060206115268582860161140e565b9150509250929050565b6000806000806080858703121561154a576115496113c0565b5b60006115588782880161140e565b94505060206115698782880161140e565b935050604061157a87828801611444565b925050606061158b87828801611444565b91505092959194509250565b6000815190506115a6816113f7565b92915050565b6000602082840312156115c2576115c16113c0565b5b60006115d084828501611597565b91505092915050565b60008115159050919050565b6115ee816115d9565b81146115f957600080fd5b50565b60008151905061160b816115e5565b92915050565b600060208284031215611627576116266113c0565b5b6000611635848285016115fc565b91505092915050565b600082825260208201905092915050565b7f496e76616c696420746f6b656e20616464726573730000000000000000000000600082015250565b600061168560158361163e565b91506116908261164f565b602082019050919050565b600060208201905081810360008301526116b481611678565b9050919050565b6116c481611423565b82525050565b60006040820190506116df60008301856114c6565b6116ec60208301846116bb565b9392505050565b7f496e76616c6964206d736720616d6f756e740000000000000000000000000000600082015250565b600061172960128361163e565b9150611734826116f3565b602082019050919050565b600060208201905081810360008301526117588161171c565b9050919050565b600060608201905061177460008301866114c6565b61178160208301856114c6565b61178e60408301846116bb565b949350505050565b7f556e617574686f72697365642063616c6c657200000000000000000000000000600082015250565b60006117cc60138361163e565b91506117d782611796565b602082019050919050565b600060208201905081810360008301526117fb816117bf565b9050919050565b600081905092915050565b50565b600061181d600083611802565b91506118288261180d565b600082019050919050565b600061183e82611810565b9150819050919050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b600061187e600f8361163e565b915061188982611848565b602082019050919050565b600060208201905081810360008301526118ad81611871565b9050919050565b6000815190506118c38161142d565b92915050565b6000602082840312156118df576118de6113c0565b5b60006118ed848285016118b4565b91505092915050565b600060808201905061190b60008301876114c6565b61191860208301866114c6565b61192560408301856116bb565b61193260608301846116bb565b95945050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061199760268361163e565b91506119a28261193b565b604082019050919050565b600060208201905081810360008301526119c68161198a565b9050919050565b7f496e76616c696420546f6b656e00000000000000000000000000000000000000600082015250565b6000611a03600d8361163e565b9150611a0e826119cd565b602082019050919050565b60006020820190508181036000830152611a32816119f6565b9050919050565b600060ff82169050919050565b611a4f81611a39565b8114611a5a57600080fd5b50565b600081519050611a6c81611a46565b92915050565b600060208284031215611a8857611a876113c0565b5b6000611a9684828501611a5d565b91505092915050565b600069ffffffffffffffffffff82169050919050565b611abe81611a9f565b8114611ac957600080fd5b50565b600081519050611adb81611ab5565b92915050565b6000819050919050565b611af481611ae1565b8114611aff57600080fd5b50565b600081519050611b1181611aeb565b92915050565b600080600080600060a08688031215611b3357611b326113c0565b5b6000611b4188828901611acc565b9550506020611b5288828901611b02565b9450506040611b63888289016118b4565b9350506060611b74888289016118b4565b9250506080611b8588828901611acc565b9150509295509295909350565b7f496e76616c696420507269636500000000000000000000000000000000000000600082015250565b6000611bc8600d8361163e565b9150611bd382611b92565b602082019050919050565b60006020820190508181036000830152611bf781611bbb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115611c8457808604811115611c6057611c5f611bfe565b5b6001851615611c6f5780820291505b8081029050611c7d85611c2d565b9450611c44565b94509492505050565b600082611c9d5760019050611d59565b81611cab5760009050611d59565b8160018114611cc15760028114611ccb57611cfa565b6001915050611d59565b60ff841115611cdd57611cdc611bfe565b5b8360020a915084821115611cf457611cf3611bfe565b5b50611d59565b5060208310610133831016604e8410600b8410161715611d2f5782820a905083811115611d2a57611d29611bfe565b5b611d59565b611d3c8484846001611c3a565b92509050818404811115611d5357611d52611bfe565b5b81810290505b9392505050565b6000611d6b82611423565b9150611d7683611423565b9250611da37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484611c8d565b905092915050565b6000611db682611423565b9150611dc183611423565b9250828202611dcf81611423565b91508282048414831517611de657611de5611bfe565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611e2782611423565b9150611e3283611423565b925082611e4257611e41611ded565b5b828204905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611e8360208361163e565b9150611e8e82611e4d565b602082019050919050565b60006020820190508181036000830152611eb281611e76565b9050919050565b6000611ec482611a39565b9150611ecf83611a39565b9250828203905060ff811115611ee857611ee7611bfe565b5b92915050565b6000611ef982611423565b9150611f0483611423565b9250828201905080821115611f1c57611f1b611bfe565b5b92915050565b6000611f2d82611423565b9150611f3883611423565b9250828203905081811115611f5057611f4f611bfe565b5b92915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611fb2602a8361163e565b9150611fbd82611f56565b604082019050919050565b60006020820190508181036000830152611fe181611fa5565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061204460268361163e565b915061204f82611fe8565b604082019050919050565b6000602082019050818103600083015261207381612037565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006120b0601d8361163e565b91506120bb8261207a565b602082019050919050565b600060208201905081810360008301526120df816120a3565b9050919050565b600081519050919050565b60005b8381101561210f5780820151818401526020810190506120f4565b60008484015250505050565b6000612126826120e6565b6121308185611802565b93506121408185602086016120f1565b80840191505092915050565b6000612158828461211b565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b600061218a82612163565b612194818561163e565b93506121a48185602086016120f1565b6121ad8161216e565b840191505092915050565b600060208201905081810360008301526121d2818461217f565b90509291505056fea2646970667358221220dcad531871cc119328a2fdaff889c63f2a4737d1f7206a31cea77094fd27dff464736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deposit(address,uint256)": {
        "details": "If ETH is sent, the function arguments are ignored."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/GovernanceTreasury.sol:GovernanceTreasury",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6330,
        "contract": "contracts/GovernanceTreasury.sol:GovernanceTreasury",
        "label": "_priceFeeds",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}